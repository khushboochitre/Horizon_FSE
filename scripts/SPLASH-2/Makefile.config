LLVM_ROOT_PATH := path_to_llvm_build_directory
CLANG := $(LLVM_ROOT_PATH)/bin/clang
OPT := $(LLVM_ROOT_PATH)/bin/opt
LINK := $(LLVM_ROOT_PATH)/bin/llvm-link
DYNAALIB := $(LLVM_ROOT_PATH)/lib/LLVMDynAA.so
ANALYSISLIB := $(LLVM_ROOT_PATH)/lib/libLLVMAnalysis.so
INSTRFUNC := $(LLVM_ROOT_PATH)/lib/Analysis/CMakeFiles/LLVMAnalysis.dir/InstrumentedFunctions.cpp.o
#CC := gcc
CC:= $(CLANG)
CFLAGS := -O3 -pthread -D_POSIX_C_SOURCE=200112
#CFLAGS := -g3 -pthread -D_POSIX_C_SOURCE=200112
CFLAGS := $(CFLAGS) -Wall -W -Wmissing-prototypes -Wmissing-declarations -Wredundant-decls -Wdisabled-optimization
CFLAGS := $(CFLAGS) -Wpadded -Winline -Wpointer-arith -Wsign-compare -Wendif-labels
FUNC_FILE := $$filename"_fun_file"

BASEDIR := path_to_splash2_base_directory
MACROS := $(BASEDIR)/null_macros/c.m4.null.POSIX_BARRIER
M4 := m4 -s -Ulen -Uindex

x = *

$(TARGET): $(OBJS)
	echo $$input; \
        if [ $$input = get-annotation ]; then \
                echo $$input; \
                $(LINK) *.bc -o merged_out.bc; \
                $(OPT) -load $(DYNAALIB) -load $(ANALYSISLIB) -prof-opt-selective -prof-func-file $(FUNC_FILE) -bench-name $$filename -dynaa -O0 merged_out.bc -o out.bc; \
                $(CC) $(CFLAGS) -fno-vectorize -fno-slp-vectorize -fno-unroll-loops $(INSTRFUNC) out.bc -o $(TARGET) $(LDFLAGS) -lm; \
        elif [ $$input = use-annotation ]; then \
                echo $$input; \
                $(LINK) *.bc -o merged_out.bc; \
                $(OPT) -load $(DYNAALIB) -load $(ANALYSISLIB) -get-opt-selective -get-func-file $(FUNC_FILE) -bench-name-read $$filename -get-dynaa -O0 merged_out.bc -o out.bc; \
                $(CC) -mllvm -stats -mllvm -loop-vect-enabled $(CFLAGS) $(INSTRFUNC) out.bc -o $(TARGET) $(LDFLAGS) -lm; \
        elif [ $$input = native ]; then \
                echo $$input; \
                $(CC) -mllvm -stats $(OBJS) $(CFLAGS) -o $(TARGET) $(LDFLAGS) -lm; \
        fi

clean:
	rm -rf *.bc *.c *.h *.o $(TARGET)

profile: 
	#make clean
	#make -C $(BASEDIR)/Makefile.Profile.config
	#$(M4) $(MACROS) $*.H > $*.h

.SUFFIXES:
.SUFFIXES:      .bc .o .c .C .h .H


.H.h:
	$(M4) $(MACROS) $*.H > $*.h

.C.c:
	$(M4) $(MACROS) $*.C > $*.c

.c.o:
	echo $$input; \
	if [ $$input = get-annotation ]; then \
		echo $$input; \
		$(CC) -emit-llvm -c $(CFLAGS) -fno-vectorize -fno-slp-vectorize -fno-unroll-loops $*.c; \
	elif [ $$input = use-annotation ]; then \
		echo $$input; \
		$(CC) -g -emit-llvm -c $(CFLAGS) -fno-vectorize -fno-slp-vectorize -fno-unroll-loops $*.c; \
	elif [ $$input = native ]; then \
		echo $$input; \
		$(CC) -c $(CFLAGS) $*.c; \
	fi

.C.o:
	echo $$input; \
	if [ $$input = get-annotation ]; then \
		echo $$input; \
		$(M4) $(MACROS) $*.C > $*.c; \
		$(CC) -g -emit-llvm -c $(CFLAGS) -fno-vectorize -fno-slp-vectorize -fno-unroll-loops $*.c; \
	elif [ $$input = use-annotation ]; then \
		echo $$input; \
		$(M4) $(MACROS) $*.C > $*.c; \
		$(CC) -g -emit-llvm -c $(CFLAGS) -fno-vectorize -fno-slp-vectorize -fno-unroll-loops $*.c; \
	elif [ $$input = native ]; then \
		$(M4) $(MACROS) $*.C > $*.c; \
		$(CC) -c $(CFLAGS) $*.c; \
	fi
